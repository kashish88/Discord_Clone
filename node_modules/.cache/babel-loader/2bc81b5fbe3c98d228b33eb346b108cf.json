{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\project1\\\\src\\\\Chat.js\";\nimport React, { useEffect, useState } from 'react';\nimport './Chat.css';\nimport ChatHeader from './ChatHeader';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport CardGiftcardIcon from '@material-ui/icons/CardGiftcard';\nimport GifIcon from '@material-ui/icons/Gif';\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\nimport Message from './Message';\nimport { selectChannelId, selectChannelName } from './features/appSlice';\nimport { useSelector } from 'react-redux';\nimport axios from './axios';\nimport { selectUser } from './features/userSlice';\nimport Pusher from 'pusher-js';\nconst pusher = new Pusher('a6d076178156f7910a9b', {\n  cluster: 'ap2'\n});\n\nfunction Chat() {\n  const user = useSelector(selectUser);\n  const channelName = useSelector(selectChannelName);\n  const channelId = useSelector(selectChannelId);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n\n  const getConversation = channelId => {\n    if (channelId) {\n      axios.get(`/get/conversation?id=${channelId}`).then(res => {\n        setMessages(res.data[0].conversation);\n      });\n    }\n  };\n\n  useEffect(() => {\n    getConversation(channelId);\n    const channel = pusher.subscribe('conversation');\n    channel.bind('newMessage', function (data) {\n      getConversation(channelId);\n    });\n  }, [channelId]);\n\n  const sendMessage = e => {\n    e.preventDefault();\n    axios.post(`/new/message?id=${channelId}`, {\n      message: input,\n      timestamp: Date.now(),\n      user: user\n    });\n    setInput('');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ChatHeader, {\n    channelName: channelName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat__messages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 12\n    }\n  }, messages.map(message => {\n    console.log(message);\n  }), messages.map(message => /*#__PURE__*/React.createElement(Message, {\n    message: message.message,\n    timestamp: message.timestamp,\n    user: message.user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat__input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(AddCircleIcon, {\n    fontSize: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    disabled: !channelId,\n    type: \"text\",\n    value: input,\n    onChange: e => setInput(e.target.value),\n    placeholder: `Message #${channelName}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: sendMessage,\n    disabled: !channelId,\n    className: \"chat__inputButton\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 16\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat__inputIcons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CardGiftcardIcon, {\n    fontSize: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(GifIcon, {\n    fontSize: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(EmojiEmotionsIcon, {\n    fontSize: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }))));\n}\n\nexport default Chat;","map":{"version":3,"sources":["C:/Users/DELL/project1/src/Chat.js"],"names":["React","useEffect","useState","ChatHeader","AddCircleIcon","CardGiftcardIcon","GifIcon","EmojiEmotionsIcon","Message","selectChannelId","selectChannelName","useSelector","axios","selectUser","Pusher","pusher","cluster","Chat","user","channelName","channelId","messages","setMessages","input","setInput","getConversation","get","then","res","data","conversation","channel","subscribe","bind","sendMessage","e","preventDefault","post","message","timestamp","Date","now","map","console","log","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,QAAxB,QAAuC,OAAvC;AACA,OAAO,YAAP;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,eAAT,EAA0BC,iBAA1B,QAAmD,qBAAnD;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAGA,MAAOC,MAAM,GAAG,IAAID,MAAJ,CAAW,sBAAX,EAAmC;AAC/CE,EAAAA,OAAO,EAAE;AADsC,CAAnC,CAAhB;;AAGA,SAASC,IAAT,GAAgB;AACZ,QAAMC,IAAI,GAACP,WAAW,CAACE,UAAD,CAAtB;AACA,QAAMM,WAAW,GAACR,WAAW,CAACD,iBAAD,CAA7B;AACA,QAAMU,SAAS,GAACT,WAAW,CAACF,eAAD,CAA3B;AACA,QAAM,CAACY,QAAD,EAAUC,WAAV,IAAuBpB,QAAQ,CAAC,EAAD,CAArC;AACA,QAAK,CAACqB,KAAD,EAAOC,QAAP,IAAiBtB,QAAQ,CAAC,EAAD,CAA9B;;AAEA,QAAMuB,eAAe,GAAEL,SAAD,IAAa;AAC/B,QAAGA,SAAH,EAAa;AACTR,MAAAA,KAAK,CAACc,GAAN,CAAW,wBAAuBN,SAAU,EAA5C,EAA+CO,IAA/C,CAAqDC,GAAD,IAAO;AACvDN,QAAAA,WAAW,CAACM,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAYC,YAAb,CAAX;AACH,OAFD;AAGH;AACJ,GAND;;AAOA7B,EAAAA,SAAS,CAAC,MAAI;AACVwB,IAAAA,eAAe,CAACL,SAAD,CAAf;AAEA,UAAMW,OAAO,GAAGhB,MAAM,CAACiB,SAAP,CAAiB,cAAjB,CAAhB;AACAD,IAAAA,OAAO,CAACE,IAAR,CAAa,YAAb,EAA2B,UAASJ,IAAT,EAAe;AACxCJ,MAAAA,eAAe,CAACL,SAAD,CAAf;AACD,KAFD;AAGH,GAPQ,EAOP,CAACA,SAAD,CAPO,CAAT;;AAUA,QAAMc,WAAW,GAAEC,CAAD,IAAK;AACnBA,IAAAA,CAAC,CAACC,cAAF;AAEAxB,IAAAA,KAAK,CAACyB,IAAN,CAAY,mBAAkBjB,SAAU,EAAxC,EAA0C;AACtCkB,MAAAA,OAAO,EAACf,KAD8B;AAEtCgB,MAAAA,SAAS,EAACC,IAAI,CAACC,GAAL,EAF4B;AAGtCvB,MAAAA,IAAI,EAACA;AAHiC,KAA1C;AAKAM,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACH,GATD;;AAYA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG,oBAAC,UAAD;AAAY,IAAA,WAAW,EAAEL,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,eAEG;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCE,QAAQ,CAACqB,GAAT,CAAcJ,OAAD,IAAa;AAC1BK,IAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;AACH,GAFG,CADD,EAIFjB,QAAQ,CAACqB,GAAT,CAAaJ,OAAO,iBACjB,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAEA,OAAO,CAACA,OAA1B;AAAmC,IAAA,SAAS,EAAEA,OAAO,CAACC,SAAtD;AAAiE,IAAA,IAAI,EAAED,OAAO,CAACpB,IAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CAJE,CAFH,eAWG;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,aAAD;AAAgB,IAAA,QAAQ,EAAC,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG;AAAO,IAAA,QAAQ,EAAE,CAACE,SAAlB;AAA6B,IAAA,IAAI,EAAC,MAAlC;AAAyC,IAAA,KAAK,EAAEG,KAAhD;AAAuD,IAAA,QAAQ,EAAGY,CAAD,IAAOX,QAAQ,CAACW,CAAC,CAACU,MAAF,CAASC,KAAV,CAAhF;AAAkG,IAAA,WAAW,EAAG,YAAW3B,WAAY,EAAvI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,eAEG;AAAQ,IAAA,OAAO,EAAEe,WAAjB;AAA8B,IAAA,QAAQ,EAAE,CAACd,SAAzC;AAAoD,IAAA,SAAS,EAAC,mBAA9D;AAAkF,IAAA,IAAI,EAAC,QAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFH,CAFD,eAMC;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,gBAAD;AAAkB,IAAA,QAAQ,EAAC,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAC,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAGI,oBAAC,iBAAD;AAAmB,IAAA,QAAQ,EAAC,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CAND,CAXH,CADJ;AA0BH;;AAED,eAAeH,IAAf","sourcesContent":["import React,{useEffect,useState} from 'react'\r\nimport './Chat.css'\r\nimport ChatHeader from './ChatHeader'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport CardGiftcardIcon from '@material-ui/icons/CardGiftcard'\r\nimport GifIcon from '@material-ui/icons/Gif'\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions'\r\nimport Message from './Message'\r\nimport { selectChannelId, selectChannelName } from './features/appSlice'\r\nimport {useSelector} from 'react-redux'\r\nimport axios from './axios'\r\nimport { selectUser } from './features/userSlice'\r\nimport Pusher from 'pusher-js'\r\n\r\n\r\nconst  pusher = new Pusher('a6d076178156f7910a9b', {\r\n    cluster: 'ap2'\r\n  });\r\nfunction Chat() {\r\n    const user=useSelector(selectUser)\r\n    const channelName=useSelector(selectChannelName)\r\n    const channelId=useSelector(selectChannelId)\r\n    const [messages,setMessages]=useState([])\r\n    const[input,setInput]=useState('')\r\n\r\n    const getConversation=(channelId)=>{\r\n        if(channelId){\r\n            axios.get(`/get/conversation?id=${channelId}`).then((res)=>{\r\n                setMessages(res.data[0].conversation)\r\n            })\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        getConversation(channelId)\r\n\r\n        const channel = pusher.subscribe('conversation');\r\n        channel.bind('newMessage', function(data) {\r\n          getConversation(channelId)\r\n        });\r\n    },[channelId])\r\n\r\n\r\n    const sendMessage=(e)=>{\r\n        e.preventDefault()\r\n\r\n        axios.post(`/new/message?id=${channelId}`,{\r\n            message:input,\r\n            timestamp:Date.now(),\r\n            user:user\r\n        })\r\n        setInput('')\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n           <ChatHeader channelName={channelName}/>\r\n           <div className=\"chat__messages\">\r\n           {messages.map((message) => {\r\n            console.log(message)\r\n        })}\r\n        {messages.map(message => (\r\n            <Message message={message.message} timestamp={message.timestamp} user={message.user} />\r\n        ))}\r\n             \r\n           </div>\r\n           <div className='chat__input'>\r\n            <AddCircleIcon  fontSize='large' />\r\n            <form>\r\n               <input disabled={!channelId} type=\"text\" value={input} onChange={(e) => setInput(e.target.value)} placeholder={`Message #${channelName}`} />\r\n               <button onClick={sendMessage} disabled={!channelId} className='chat__inputButton' type=\"submit\"></button>\r\n            </form>\r\n            <div className='chat__inputIcons'>\r\n                <CardGiftcardIcon fontSize='large' />\r\n                <GifIcon fontSize='large'/>\r\n                <EmojiEmotionsIcon fontSize='large' />\r\n            </div>\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n"]},"metadata":{},"sourceType":"module"}